#include <iostream>
#include <vector>
#include <array>
#include <algorithm>


void vectorDefault()
{
	std::vector<int> vec;
	std::vector<int>::iterator it; // iterator 사용

	//삽입
	vec.push_back(1);
	vec.push_back(2);
	vec.push_back(3);

	//출력 방법 1: 1, 2, 3
	for (const auto& ele : vec)
		std::cout << ele << ", ";
	std::cout << std::endl;

	//출력 방법 2: 1, 2, 3
	for (auto it = vec.begin(); it != vec.end(); ++it)
		std::cout << *it << ", ";
	std::cout << std::endl;
}


void vectorArray()
{
	// 3개의 인수 공간 할당
	std::vector<int> vec1(3);
	
	// 미리 할당해놓은 배열의 크기가 capacity, 할당해놓은 배열에 들어 있는 원소의 수가 size
	std::cout << "vec1.capacity() : " << vec1.capacity() << std::endl;
	std::cout << "vec1.size() : " << vec1.size() << std::endl;

	///////////////////////////////////////

	// vector형 어레이 (2차원)
	std::vector<int> vec2[5];

	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			vec2[i].push_back(j); // 삽입 방법
		}
	}

	for (const auto& ele : vec2)
	{
		for (int i = 0; ele.size(); i++)
		{
			std::cout << ele[i] << " ";
		}
		std::cout << std::endl;
	}

	// 0
	// 0 1
	// 0 1 2
	// 0 1 2 3 
	// 0 1 2 3 4
}

void vectorPairArray()
{
	//pair형 vector로 인접배열 생성
	std::vector<std::pair<int, int> > adj[10];

	//그래프, 정방향 (0 -> 1, 0 -> 2, 1 -> 2)
	adj[0].push_back(std::make_pair(1, 10));
	adj[0].push_back(std::make_pair(2, 20));
	adj[1].push_back(std::make_pair(2, 30));

	// 그래프, 역방향 (1 -> 0, 2 -> 0, 2 -> 1)
	adj[1].push_back(std::make_pair(0, 10));
	adj[2].push_back(std::make_pair(0, 20));
	adj[2].push_back(std::make_pair(1, 30));

	std::cout << "from, to, cost" << std::endl;
	for (int i = 0; i < 3; ++i)
	{
		for (int j = 0; j < adj[i].size(); j++)
		{
			std::cout << i << ", ";
			std::cout << adj[i][j].first << ", ";
			std::cout << adj[i][j].second;
			std::cout << std::endl;
		}
	}

	// from, to, cost
	// 0, 1, 10
	// 0, 2, 20
	// 1, 2, 30
	// 1, 0, 10
	// 2, 0, 20
	// 2, 1, 30
}

void vectorReserve()
{
	// vector는 일정 크기의 배열을 할당한 뒤 push_back을 계속 해서 size가 capacity를 넘어가려고 하면 2배 크기의 배열을 만들어 이동하는 식으로 구현이 되어 있음

	std::vector<int> v1, v2;
	v1.reserve(10000);
	v2.reserve(10000);

	std::cout << "v1.capacity(): " << v1.capacity() << std::endl;
	std::cout << "v1.size(): " << v1.size() << std::endl;

	std::cout << "v2.capacity(): " << v2.capacity() << std::endl;
	std::cout << "v2.size(): " << v2.size() << std::endl;

	// v1.capacity(): 10000
	// v1.size(): 0
	// v2.capacity(): 10000
	// v2.size(): 10000
}

void vector_Array_Sort()
{
	std::vector<int> myvec{ 2,4,6,8,10,1,3,5,7,9 };

	for (int i = 0; i < 10; ++i)
		std::cout << myvec[i] << ' ';
	std::cout << std::endl;
	
	// 'algorithm'
	std::sort(myvec.begin(), myvec.end());

	for (int i = 0; i < 10; ++i)
		std::cout << myvec[i] << ' ';
	std::cout << std::endl;

	/////////////////////////////////////////////////

	std::array<int, 10> myarr{ 2,4,6,8,10,1,3,5,7,9 };

	for (int i = 0; i < 10; ++i)
		std::cout << myarr[i] << ' ';
	std::cout << std::endl;

	std::sort(myarr.begin(), myarr.end());

	for (int i = 0; i < 10; ++i)
		std::cout << myarr[i] << ' ';
	std::cout << std::endl;

	/*
	2 4 6 8 10 1 3 5 7 9
	1 2 3 4 5 6 7 8 9 10
	2 4 6 8 10 1 3 5 7 9
	1 2 3 4 5 6 7 8 9 10
	*/
}

int main()
{
	vectorDefault();
	vectorArray();
	vectorPairArray();
	vectorReserve();
	vector_Array_Sort();

	return 0;
}
