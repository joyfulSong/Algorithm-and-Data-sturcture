헷갈리거나 유의해야할 사항에 대해서 정리

[메모리 할당 시]
array - int arr1[3] arry는 크기를 할당할 때 정적 메모리를 사용해야함. 변수명 사용하지 말고, 크기로 할당
vector - std::vector<int> vec2(num1) vector는 변수로 할당 가능

[입출, 접근]
array - front(), back(), at()
vector - push_back(), insert() / erase(), pop_back(), clear() / at(), front(), back()
stack(접시쌓기) - push() 앞으로 / pop() / top
queue(구슬꿰기) - push() 뒤로 / pop() / front(), back(), 인덱스 접근 불가
deque - push_front(), push_back(), insert() / erase(), pop_front(), pop_back(), clear() / at(), front(), back(), 인덱스 접근 가능
priority queue - push() / pop() / top()
list- push_front(), push_back(), insert() / pop_front(), pop_back(), remove(), erase(), clear() / front(), back()

[empty()]
array -
vector -
stack - 
queue - 
deque -
priority queue -
list

[2차원 배열]
array - int arr[3][5]
vector - vector<int> arr[5] 에 각각에 push_back
       - [0]에 넣을 때 arr[0].push_back(std::make_pair(1, 10))로 넣을 시 cost와 함께 인접리스트 생성가능. 0 - (10) - 1


[포인터 사용]
array - int* ptr1 = arr, int* ptr2 = &arr[0], ptr1+1은 자료형 크기만큼 한칸 이동한 곳의 주소 가리킴 
      - *(ptr)로 데이터 참조
// 나머지는?      

[정렬 사용]
array, vector 모두 std::sort 사용 가능

[iterator 사용]
vector - std::vector<int>::iterator it, .begin(), .end() 사용
deque - std::deque<int>::iterator it = mydeque.begin(), .end()
list - std::list<int>::iterator it = mylist.begin(), .end()
//나머지는 없음

[size()와 size()가 아닌것]
vector - 미리 할당해놓은 배열의 크기가 .capacity(), 할당해놓은 배열에 들어 있는 원소의 수가 .size()
vector, stack, list, array_list - 미리 할당해놓은 배열의 크기가 .capacity(), 할당해놓은 배열에 들어 있는 원소의 수가 .size()

[capacity 없는것]
queue, deque, set, map

set, map은 key, value를 갖는 연관컨테이너이다
